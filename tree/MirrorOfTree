package Tree;

public class MirrorOfTree {
	Node root;
	 
    void mirror()
    {
        root = mirror(root);
    }
 
    Node mirror(Node node)
    {
        if (node == null)
            return node;
 
        /* do the subtrees */
        Node left = mirror(node.left);
        Node right = mirror(node.right);
 
        /* swap the left and right pointers */
        node.left = right;
        node.right = left;
 
        return node;
    }
 
    void inOrder()
    {
        inOrder(root);
    }
 
    /* Helper function to test mirror(). Given a binary
       search tree, print out its data elements in
       increasing sorted order.*/
    void inOrder(Node node)
    {
        if (node == null)
            return;
 
        inOrder(node.left);
        System.out.print(node.key + " ");
 
        inOrder(node.right);
    }
 
    /* testing for example nodes */
    public static void main(String args[])
    {
        /* creating a binary tree and entering the nodes */
    	CreateTree createTree = new CreateTree();
    	Node node = createTree.getTree();
        MirrorOfTree  mirrorOfTree = new MirrorOfTree();
 
        /* print inorder traversal of the input tree */
        System.out.println("Inorder traversal of input tree is :");
        CreateTree.inorder(node);
        System.out.println("");
 
        /* convert tree to its mirror */
        mirrorOfTree.mirror(node);
 
        /* print inorder traversal of the minor tree */
        System.out.println("Inorder traversal of binary tree is : ");
        CreateTree.inorder(node);
 
    }
}
