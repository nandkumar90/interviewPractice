package Tree;

public class CreateTree {
	public Node getTree() {
		Node root = new Node(1);
		root.left = new Node(2);
		root.right = new Node(3);
		root.left.left = new Node(4);
		root.left.right = new Node(5);
		/*root.left.right.left = new Node(6);
		root.left.right.left.left = new Node(7);
		root.left.right.left.left.left = new Node(8);
		root.left.right.left.left.left.left = new Node(9);*/
		/*Node root = new Node(20); 
        root.left = new Node(8); 
        root.right = new Node(22); 
        root.left.left = new Node(5); 
        root.left.right = new Node(3); 
        root.right.left = new Node(4); 
        root.right.right = new Node(25); 
        root.left.right.left = new Node(10); 
        root.left.right.right = new Node(14); */
		return root;
	}

	public static void inorder(Node node) {
		if (node != null) {
			inorder(node.left);
			System.out.println(node.key);
			inorder(node.right);

		}

	}

	public static void postorder(Node node) {
		if (node != null) {
			inorder(node.left);
			inorder(node.right);
			System.out.println(node.key);
		}
	}

	public static void preorder(Node node) {
		if (node != null) {
			System.out.println(node.key);
			inorder(node.left);
			inorder(node.right);
		}
	}

	public static Node mirror(Node node) {
		if (node == null)
			return node;

		/* do the subtrees */
		Node left = mirror(node.left);
		Node right = mirror(node.right);

		/* swap the left and right pointers */
		node.left = right;
		node.right = left;

		return node;
	}

	public static int height(Node node) {
		if (node == null) {
			return 0;
		}

		int l = height(node.left);
		int r = height(node.right);

		return l > r ? l + 1 : r + 1;

	}
}
