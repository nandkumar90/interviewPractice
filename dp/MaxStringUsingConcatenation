package dp;

import java.util.ArrayList;
import java.util.List;

//https://www.geeksforgeeks.org/word-formation-using-concatenation-of-two-dictionary-words/
public class MaxStringUsingConcatenation {
	 // Alphabet size  
    final static int SIZE = 26;  
      
    // Trie Node  
    static class TrieNode  
    {  
        TrieNode[] children = new TrieNode[SIZE];  
      
        // isLeaf is true if the node represents  
        // end of a word  
        boolean isLeaf;  
          
        // constructor  
        public TrieNode() {  
            isLeaf = false;  
            for (int i =0 ; i< SIZE ; i++)  
                    children[i] = null;  
        }  
    }  
      
      
    static TrieNode root;  
      
    // If not present, inserts key into Trie  
    // If the key is prefix of trie node, just  
    // mark leaf node  
    static void insert(TrieNode root, String Key)  
    {  
        int n = Key.length();  
        TrieNode pCrawl = root;  
      
        for (int i=0; i<n; i++)  
        {  
            int index = Key.charAt(i) - 'a';  
      
            if (pCrawl.children[index] == null)  
                pCrawl.children[index] = new TrieNode();  
      
            pCrawl = pCrawl.children[index];  
        }  
      
        // make last node as leaf node  
        pCrawl.isLeaf = true;  
    }  
      
    // Searches a prefix of key. If prefix is present,  
    // returns its ending position in string. Else  
    // returns -1.  
    static List<Integer> findPrefix(TrieNode root, String key)  
    {  
        List<Integer> prefixPositions = new ArrayList<Integer>(); 
        int level;  
        TrieNode pCrawl = root;  
      
        for (level = 0; level < key.length(); level++)  
        {  
            int index = key.charAt(level) - 'a';  
            if (pCrawl.isLeaf == true)  
                prefixPositions.add(level);  
            if (pCrawl.children[index] == null)  
                return prefixPositions;  
      
            pCrawl = pCrawl.children[index];  
        }  
        if (pCrawl != null && pCrawl.isLeaf)  
            prefixPositions.add(level);   
          
        return prefixPositions;   
    }  
      
    // Function to check if word formation is possible  
    // or not  
    static boolean isPossible(TrieNode root, String word)  
    {  
        // Search for the word in the trie and get its prefix positions 
        // upto which there is matched  
        List<Integer> prefixPositions1 = findPrefix(root, word);  
      
        // Word formation is not possible if the word did not have  
        // at least one prefix match 
        if (prefixPositions1.isEmpty())  
            return false;  
      
        // Search for rest of substring for each prefix match 
        for (Integer len1 : prefixPositions1) { 
            String restOfSubstring = word.substring(len1, word.length());  
            List<Integer> prefixPositions2 = findPrefix(root, restOfSubstring); 
            for (Integer len2 : prefixPositions2) { 
                // check if word formation is possible 
                if (len1 + len2 == word.length()) 
                    return true; 
            } 
        } 
          
        return false; 
    }  
      
    // Driver program to test above function  
    public static void main(String args[])  
    {  
        // Let the given dictionary be following  
        String[] dictionary = {"news", "newspa", "paper", "geek"};  
      
        String word = "newspaper"; //word to be formed  
      
        // root Node of trie  
        root = new TrieNode();  
      
        // insert all words of dictionary into trie  
        for (int i=0; i<dictionary.length; i++)  
            insert(root, dictionary[i]);  
      
        if(isPossible(root, word))  
            System.out.println( "Yes");  
        else
            System.out.println("No");  
    }
}
