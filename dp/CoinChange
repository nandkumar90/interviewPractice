package dp;

import java.util.Arrays;
//https://www.geeksforgeeks.org/coin-change-dp-7/
public class CoinChange {
	
	 static int count( int S[], int m, int sum ) 
	    { 
	        // If n is 0 then there is 1 solution  
	        // (do not include any coin) 
	        if (sum == 0) 
	            return 1; 
	          
	        // If n is less than 0 then no  
	        // solution exists 
	        if (sum < 0) 
	            return 0; 
	      
	        // If there are no coins and n  
	        // is greater than 0, then no 
	        // solution exist 
	        if (m <=0 && sum >= 1) 
	            return 0; 
	      
	        // count is sum of solutions (i)  
	        // including S[m-1] (ii) excluding S[m-1] 
	        return count( S, m - 1, sum ) + 
	               count( S, m, sum-S[m-1] ); 
	    } 
	 
	 
	static long countWays(int S[], int m, int n) 
    { 
        //Time complexity of this function: O(mn) 
        //Space Complexity of this function: O(n) 
  
        // table[i] will be storing the number of solutions 
        // for value i. We need n+1 rows as the table is 
        // constructed in bottom up manner using the base 
        // case (n = 0) 
        long[] table = new long[n+1]; 
  
        // Initialize all table values as 0 
        Arrays.fill(table, 0);   //O(n) 
  
        // Base case (If given value is 0) 
        table[0] = 1; 
  
        // Pick all coins one by one and update the table[] 
        // values after the index greater than or equal to 
        // the value of the picked coin 
        for (int i=0; i<m; i++) 
            for (int j=S[i]; j<=n; j++) 
                table[j] += table[j-S[i]]; 
  
        return table[n]; 
    } 
	
	 // m is size of coins array (number of different coins) 
    static int minCoins(int coins[], int m, int V) 
    { 
       // base case 
       if (V == 0) return 0; 
       
       // Initialize result 
       int res = Integer.MAX_VALUE; 
       
       // Try every coin that has smaller value than V 
       for (int i=0; i<m; i++) 
       { 
         if (coins[i] <= V) 
         { 
             int sub_res = minCoins(coins, m, V-coins[i]); 
       
             // Check for INT_MAX to avoid overflow and see if 
             // result can minimized 
             if (sub_res != Integer.MAX_VALUE && sub_res + 1 < res) 
                res = sub_res + 1; 
         } 
       } 
       return res; 
    } 
  
    // Driver Function to test above function 
    public static void main(String args[]) 
    { 
        int arr[] = {1, 2, 3}; 
        int m = arr.length; 
        int n = 4; 
        System.out.println("Minimum coins required is "+ count(arr, m, n) ); 

        //System.out.println(countWays(arr, m, n)); 
    } 
}
