import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class Ratelimitor {

	private static final int T = 1; // min
	private static final int N = 345;

	private Lock lock = new ReentrantLock();
	private Condition newFrame = lock.newCondition();
	private volatile boolean currentFrame = true;

	public Ratelimitor() {
		handleForGate();
	}

	/**
	 * Payload
	 */
	private void job() {
		try {
			Thread.sleep(Math.abs(ThreadLocalRandom.current().nextLong(12, 98)));
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		System.err.print(" J. ");
	}

	public void doJob() throws InterruptedException {
		lock.lock();
		try {

			while (true) {

				int count = 0;

				while (count < N && currentFrame) {
					job();
					count++;
				}

				newFrame.await();
				currentFrame = true;
			}

		} finally {
			lock.unlock();
		}
	}

	public void handleForGate() {
		Thread handler = new Thread(() -> {
			while (true) {
				try {
					Thread.sleep(1 * 900);
				} catch (InterruptedException e) {
					e.printStackTrace();
				} finally {
					currentFrame = false;

					lock.lock();
					try {
						newFrame.signal();
					} finally {
						lock.unlock();
					}
				}
			}
		});
		handler.start();
	}
}
