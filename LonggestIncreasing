package LonggestIncreasing;
//https://www.geeksforgeeks.org/egg-dropping-puzzle-dp-11/
public class EggDrop {
	// A utility function to get maximum of two integers
	static int max(int a, int b) {
		return (a > b) ? a : b;
	}

	/*
	 * Function to get minimum number of trials needed in worst case with n eggs and
	 * k floors
	 */
	static int eggDrop(int n, int k) {
		/*
		 * A 2D table where entery eggFloor[i][j] will represent minimum number of
		 * trials needed for i eggs and j floors.
		 */
		int eggFloor[][] = new int[n + 1][k + 1];
		int res;
		int i, j, x;

		// We need one trial for one floor and0 trials for 0 floors
		for (i = 1; i <= n; i++) {
			eggFloor[i][1] = 1;
			eggFloor[i][0] = 0;
		}

		// We always need j trials for one egg and j floors.
		for (j = 1; j <= k; j++)
			eggFloor[1][j] = j;

		// Fill rest of the entries in table using optimal substructure
		// property
		for (i = 2; i <= n; i++) {
			for (j = 2; j <= k; j++) {
				eggFloor[i][j] = Integer.MAX_VALUE;
				for (x = 1; x <= j; x++) {
					res = 1 + max(eggFloor[i - 1][x - 1], eggFloor[i][j - x]);
					if (res < eggFloor[i][j])
						eggFloor[i][j] = res;
				}
			}
		}

		// eggFloor[n][k] holds the result
		return eggFloor[n][k];

	}

	public static  int getDrops(int eggs, int floors){
        //base case 1:
        //if floors = 0 then no drops are required OR floors = 1 then 1 drop is required
        if(floors==0 || floors==1)
            return floors;

        //base case 2:
        //if only one egg is there then drops = floors
        if(eggs==1)
            return floors;

        int minimumDrops=Integer.MAX_VALUE, tempResult;
        //check dropping from all the floors 1 to floors and pick the minimum among those.
        //for every drop there are 2 scenarios - a) either egg will break b) egg will not break
        for (int i = 1; i <=floors ; i++) {
            //for the worst case pick the maximum among a) and b)
            tempResult = Math.max(getDrops(eggs-1,i-1), getDrops(eggs, floors-i));
            minimumDrops = Math.min(tempResult,minimumDrops);
        }
        return minimumDrops + 1;
    }
	
	/* Driver program to test to pront printDups */
	public static void main(String args[]) {
		int n = 2, k = 10;
		System.out.println(
				"Minimum number of trials in worst case with " + n + "  eggs and " + k + " floors is " + eggDrop(n, k));

		System.out.println(
				"Minimum number of trials in worst case with " + n + "  eggs and " + k + " floors is " + getDrops(n, k));

	}

}
