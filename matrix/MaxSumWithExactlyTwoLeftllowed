package matrix;
//https://www.geeksforgeeks.org/find-maximum-path-sum-in-a-2d-matrix-when-exactly-two-left-moves-are-allowed/
public class MaxSumWithExactlyTwoLeftllowed {

	static int N = 3;
	static int M = 3;

	// Function to return the maximum path sum
	static int findMaxSum(int arr[][]) {
		int sum = 0;
		int[][] b = new int[N][M];

		// Copy last column i.e. starting and
		// ending columns in another array
		for (int i = 0; i < N; i++) {
			b[i][M - 1] = arr[i][M - 1];
		}

		// Calculate suffix sum in each row
		for (int i = 0; i < N; i++) {
			for (int j = M - 2; j >= 0; j--) {
				b[i][j] = arr[i][j] + b[i][j + 1];
			}
		}

		// Select the path we are going to follow
		for (int i = 1; i < N; i++) {
			for (int j = 0; j < M; j++) {
				sum = Math.max(sum, b[i][j] + b[i - 1][j]);

				b[i][j] = Math.max(b[i][j], b[i - 1][j] + arr[i][j]);
			}
		}

		return sum;
	}

	// Driver Code
	public static void main(String[] args) {

		int arr[][] = { { 3, 7, 4 }, { 1, 9, 6 }, { 1, 7, 7 } };

		System.out.println(findMaxSum(arr));
	}
}
