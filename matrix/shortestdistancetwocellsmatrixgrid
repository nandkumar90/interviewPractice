package matrix;

import java.util.LinkedList;
import java.util.Queue;

//https://www.geeksforgeeks.org/shortest-distance-two-cells-matrix-grid/
public class shortestdistancetwocellsmatrixgrid {
	static int N=4;
	static int M = 4;
	static int minDistance(char grid[][]) 
	{ 
	    QItem source = new QItem(0, 0, 0); 
	  
	    // To keep track of visited QItems. Marking 
	    // blocked cells as visited. 
	    boolean visited[][] = new boolean[N][M]; 
	    for (int i = 0; i < N; i++) { 
	        for (int j = 0; j < M; j++) 
	        { 
	            if (grid[i][j] == '0') 
	                visited[i][j] = true; 
	            else
	                visited[i][j] = false; 
	  
	            // Finding source 
	            if (grid[i][j] == 's') 
	            { 
	               source.row = i; 
	               source.col = j; 
	            } 
	        } 
	    } 
	  
	    // applying BFS on matrix cells starting from source 
	    Queue<QItem> q = new LinkedList<>(); 
	    q.offer(source); 
	    visited[source.row][source.col] = true; 
	    while (!q.isEmpty()) { 
	        QItem p = q.poll(); 
	  
	        // Destination found; 
	        if (grid[p.row][p.col] == 'd') 
	            return p.dist; 
	  
	        // moving up 
	        if (p.row - 1 >= 0 && 
	            visited[p.row - 1][p.col] == false) { 
	            q.offer(new QItem(p.row - 1, p.col, p.dist + 1)); 
	            visited[p.row - 1][p.col] = true; 
	        } 
	  
	        // moving down 
	        if (p.row + 1 < N && 
	            visited[p.row + 1][p.col] == false) { 
	            q.offer(new QItem(p.row + 1, p.col, p.dist + 1)); 
	            visited[p.row + 1][p.col] = true; 
	        } 
	  
	        // moving left 
	        if (p.col - 1 >= 0 && 
	            visited[p.row][p.col - 1] == false) { 
	            q.offer(new QItem(p.row, p.col - 1, p.dist + 1)); 
	            visited[p.row][p.col - 1] = true; 
	        } 
	  
	         // moving right 
	        if (p.col + 1 < M && 
	            visited[p.row][p.col + 1] == false) { 
	            q.offer(new QItem(p.row, p.col + 1, p.dist + 1)); 
	            visited[p.row][p.col + 1] = true; 
	        } 
	    } 
	    return -1; 
	} 
	  
	// Driver code 
public static void main(String[] args)	{ 
	    char[][] grid = { { '0', '*', '0', 's' }, 
	                        { '*', '0', '*', '*' }, 
	                        { '0', '*', '*', '*' }, 
	                        { 'd', '*', '*', '*' } }; 
	  
	    System.out.println(minDistance(grid));
	} 
}
